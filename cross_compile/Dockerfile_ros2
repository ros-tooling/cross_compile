# This dockerfile takes ROS2 source packages from ${ROS2_WORKSPACE}/ros2_ws/src
# and builds them for the specified target platform.
# It uses qemu user-mode static emulation libraries from ${ROS2_WORKSPACE}/qemu-user-static/
# to emulate the target platform.

# Assumptions: ros2_ws/src and qemu-user-static directories are present in  ${ROS2_WORKSPACE}.

ARG ROS2_BASE_IMG
FROM ${ROS2_BASE_IMG}

ARG ROS2_WORKSPACE
ARG ROS_DISTRO
ARG TARGET_TRIPLE
ARG TARGET_ARCH

COPY qemu-user-static/ /usr/bin/

# Set timezone
RUN echo 'Etc/UTC' > /etc/timezone && \
    ln -sf /usr/share/zoneinfo/Etc/UTC /etc/localtime

RUN apt-get update && apt-get install -y \
        tzdata \
        locales \
    && rm -rf /var/lib/apt/lists/*

# Set locale
RUN echo 'en_US.UTF-8 UTF-8' >> /etc/locale.gen && \
    locale-gen && \
    update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8
ENV LANG en_US.UTF-8
ENV LC_ALL C.UTF-8

# Add the ros2 apt repo
RUN apt-get update && apt-get install -y \
        curl \
        gnupg2 \
        lsb-release \
    && rm -rf /var/lib/apt/lists/*
RUN curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | apt-key add -
RUN sh -c 'echo "deb [arch=amd64,arm64] http://packages.ros.org/ros2/ubuntu `lsb_release -cs` main" \
    > /etc/apt/sources.list.d/ros2-latest.list'

# ROS2 dependencies
RUN apt-get update && apt-get install -y \
      build-essential \
      cmake \
      git \
      python3-pip \
      python-rosdep \
      wget \
      symlinks \
    && rm -rf /var/lib/apt/lists/*

# Install some pip packages needed for testing
RUN python3 -m pip install -U \
    argcomplete \
    colcon-common-extensions \
    colcon-mixin \
    flake8 \
    flake8-blind-except \
    flake8-builtins \
    flake8-class-newline \
    flake8-comprehensions \
    flake8-deprecated \
    flake8-docstrings \
    flake8-import-order \
    flake8-quotes \
    pytest-repeat \
    pytest-rerunfailures \
    pytest \
    pytest-cov \
    pytest-runner \
    setuptools \
    vcstool

# Install Fast-RTPS dependencies
RUN apt-get update && apt-get install --no-install-recommends -y \
        libasio-dev \
        libtinyxml2-dev \
    && rm -rf /var/lib/apt/lists/*

# Setup ROS2 workspace
COPY ${ROS2_WORKSPACE}/src /ros2_ws/src
WORKDIR /ros2_ws

# Run rosdep to get dependencies for the copied-in ROS2 workspace
ENV ROSDEP_SKIP_KEYS="console_bridge fastcdr fastrtps libopensplice67 libopensplice69 rti-connext-dds-5.3.1 urdfdom_headers"
RUN rm -f /etc/ros/rosdep/sources.list.d/20-default.list    # In case of cached image.
RUN rosdep init
RUN rosdep update && \
    apt-get update && \
    rosdep install --from-paths src \
        --ignore-src \
        --rosdistro ${ROS_DISTRO} -y \
        --skip-keys "${ROSDEP_SKIP_KEYS}" \
    && rm -rf /var/lib/apt/lists/*

# Set up and run the build for the workspace (this will be removed from here when we get to host-native cross-compiling)
RUN colcon mixin add cc_mixin \
    https://raw.githubusercontent.com/ros-tooling/cross_compile/master/mixins/index.yaml && \
    colcon mixin update cc_mixin
RUN colcon build --mixin ${TARGET_ARCH}-docker

# To avoid linker issues when using a compiler with different GLIBC and GLIBCXX
# root_path/usr should be used as CMAKE_FIND_ROOT_PATH in the toolchain file
RUN mkdir -p /root_path/usr \
 && ln -s ../lib/${TARGET_TRIPLE} /root_path/lib \
 && ln -s ../../usr/lib/${TARGET_TRIPLE} /root_path/usr/lib \
 && cp -r /usr/lib/gcc/${TARGET_TRIPLE}/*/* /root_path/usr/lib

WORKDIR /
RUN symlinks -rc .
